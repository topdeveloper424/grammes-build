{"version":3,"file":"static/js/113.7e06c8d4.chunk.js","mappings":"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","sources":["features/auth/pages/ForgetPasswordPreset.js"],"sourcesContent":["import * as React from 'react';\r\nimport { useRef, useState, useEffect } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { Image } from 'react-bootstrap';\r\nimport { Helmet } from 'react-helmet'\r\nimport { getFixedT } from 'i18next';\r\n\r\nimport logoPng from './../../../assets/images/100g_vert.png'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './../css/auth.css'\r\nimport { useSendVerifyCodeMutation } from '../slices/authApiSlice';\r\nimport backgroundPng from './../../../assets/images/2fa.png'\r\n\r\nconst ForgetPasswordPreset = () => {\r\n    const t = getFixedT(null, null, 'forgetPassword')\r\n    const navigate = useNavigate()\r\n    const emailRef = useRef()\r\n    const [email, setEmail] = useState('')\r\n    const [errMsg, setErrMsg] = useState('')\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const [sendVerifyCode] = useSendVerifyCodeMutation()\r\n    useEffect(() => {\r\n        emailRef.current.focus()\r\n    }, [])\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n\r\n        setIsProcessing(true)\r\n        try {\r\n            const userData = await sendVerifyCode({ email: email, type: 'FORGET_PASS' }).unwrap()\r\n\r\n            navigate('/sent-success')\r\n        } catch (err) {\r\n            console.log(err)\r\n            setIsProcessing(false)\r\n            const data = err.data\r\n            if (!err?.status) {\r\n                // isLoading: true until timeout occurs\r\n                setErrMsg(t(data.message));\r\n            } else if (err.status === 400) {\r\n                setErrMsg(t(data.message));\r\n            } else {\r\n                setErrMsg(t(data.message));\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleEmailInput = (e) => setEmail(e.target.value)\r\n\r\n\r\n    return (<>\r\n        <Helmet title={t('title')} />\r\n\r\n        <div class=\"card card1\">\r\n            <form id=\"customerLoginForm\" className=\"form-inner customer-login-form\" onSubmit={handleSubmit}>\r\n                <div class=\"row justify-content-center my-auto\">\r\n                    <div class=\"col-md-8 col-10 my-5\">\r\n                        <div class=\"row justify-content-center px-3 py-5 my-5 mb-3\"> <Image id=\"logo\" src={logoPng} /> </div>\r\n                        <p>Please enter your email, you will receive the link for resetting your password via email</p>\r\n                        <div class=\"form-group my-5\">\r\n                            <label class=\"form-control-label text-muted\" for=\"email\">{t('Email')}<span className=\"text-danger\">*</span></label>\r\n                            <input\r\n                                type=\"email\"\r\n                                id=\"email\"\r\n                                name='email'\r\n                                className=\"form-control\"\r\n                                autoComplete=\"email\"\r\n                                placeholder={t('Enter Email')}\r\n                                required\r\n                                ref={emailRef}\r\n                                value={email}\r\n                                onChange={handleEmailInput}\r\n                            />\r\n                        </div>\r\n\r\n                        <div class=\"row justify-content-center my-3 px-3\">\r\n                            {isProcessing ? <button class=\"btn-block btn-color\" disabled={true}><Spinner animation=\"border\" variant=\"danger\" /></button> : <button class=\"btn-block btn-color\">{t('Next')}</button>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {errMsg ? (<Alert key='danger' variant='danger' style={{ textAlign: 'center' }} >{errMsg}</Alert>) : \"\"}\r\n            </form>\r\n        </div>\r\n        <div class=\"card card2\" style={{ backgroundImage: `url(${backgroundPng})` }}>\r\n        </div>\r\n\r\n    </>\r\n\r\n    )\r\n}\r\n\r\nexport default ForgetPasswordPreset;"],"names":["t","getFixedT","navigate","useNavigate","emailRef","useRef","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","errMsg","setErrMsg","_useState5","_useState6","isProcessing","setIsProcessing","_useSendVerifyCodeMut","useSendVerifyCodeMutation","sendVerifyCode","useEffect","current","focus","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","data","wrap","_context","prev","next","preventDefault","type","unwrap","sent","t0","console","log","status","message","stop","_x","apply","arguments","_jsxs","_Fragment","children","_jsx","Helmet","title","class","id","className","onSubmit","Image","src","logoPng","for","name","autoComplete","placeholder","required","ref","value","onChange","target","disabled","Spinner","animation","variant","Alert","style","textAlign","backgroundImage","concat","backgroundPng"],"sourceRoot":""}