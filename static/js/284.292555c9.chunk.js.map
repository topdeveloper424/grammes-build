{"version":3,"file":"static/js/284.292555c9.chunk.js","mappings":"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","sources":["features/auth/pages/ResetPassword.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useRef, useState } from \"react\";\r\nimport { useNavigate, Navigate, useSearchParams } from \"react-router-dom\";\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { Image } from 'react-bootstrap';\r\nimport { Helmet } from 'react-helmet'\r\nimport { getFixedT } from 'i18next';\r\n\r\nimport Loading from '../../../components/Loading';\r\n\r\nimport logoPng from './../../../assets/images/100g_vert.png'\r\nimport showImg from './../../../assets/images/show-30.png'\r\nimport hideImg from './../../../assets/images/hide-30.png'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './../css/auth.css'\r\n\r\nimport { useGetVerifyCodeQuery, useResetPasswordMutation } from '../slices/authApiSlice';\r\nimport backgroundPng from './../../../assets/images/2fa.png'\r\n\r\nconst ResetPassword = () => {\r\n    const t = getFixedT(null, null, 'forgetPassword')\r\n    const navigate = useNavigate()\r\n    const [queryParameters] = useSearchParams()\r\n    const code = queryParameters.get('code');\r\n    const [password, setPassword] = useState('')\r\n    const [passwordConfirm, setPasswordConfirm] = useState('')\r\n\r\n    const [sendMsg, setSendMsg] = useState(null)\r\n    const passwordRef = useRef()\r\n    const [errMsg, setErrMsg] = useState('')\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n\r\n    const [resetPassword] = useResetPasswordMutation()\r\n    const {\r\n        data: verifyData,\r\n        isLoading,\r\n        isError\r\n    } = useGetVerifyCodeQuery({ code: code, type: 'FORGET_PASS' })\r\n\r\n    useEffect(() => {\r\n        if(passwordRef.current){\r\n            passwordRef.current.focus()\r\n        }\r\n    }, [])\r\n\r\n\r\n    if (isLoading) {\r\n        return <Loading />\r\n    }\r\n\r\n    if (!verifyData && isError) {\r\n        return <Navigate to={{ pathname: \"/signin\" }} />\r\n    }\r\n\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault()\r\n        if (password !== passwordConfirm || password.length < 6) {\r\n            setErrMsg(t('Passwords doesn\\'t match!'))\r\n            return\r\n        }\r\n\r\n        var lowerCase = /[a-z]/g;\r\n        var upperCase = /[A-Z]/g;\r\n        var numbers = /[0-9]/g;\r\n        var variant = 'Error'\r\n        var message = '';\r\n        if (!password.match(lowerCase)) {\r\n            message = t('Password should contains lowercase letters!')\r\n        } else if (!password.match(upperCase)) {\r\n            message = t('Password should contain uppercase letters!')\r\n        } else if (!password.match(numbers)) {\r\n            message = t('Password should contains numbers also!')\r\n        } else if (password.length < 8) {\r\n            message = t('Password length should be more than 8!')\r\n        } else if (password != passwordConfirm) {\r\n            message = t('Password confirmation doesn\\'t match!')\r\n        } else {\r\n            variant = 'Success'\r\n        }\r\n        if (variant == 'Error') {\r\n            setErrMsg(message);\r\n            return;\r\n        }\r\n\r\n        if (!verifyData || !verifyData.email) {\r\n            navigate('/signin')\r\n        }\r\n        try {\r\n            setIsProcessing(true)\r\n            const userData = await resetPassword({ code: code, email: verifyData.email, type: 'FORGET_PASS', password: password }).unwrap()\r\n            setIsProcessing(false)\r\n            navigate('/signin')\r\n        } catch (err) {\r\n            setIsProcessing(false)\r\n            console.log(err)\r\n            passwordRef.current.focus();\r\n            const data = err.data\r\n            if (!err?.status) {\r\n                // isLoading: true until timeout occurs\r\n                setErrMsg(t(data.message));\r\n            } else if (err.status === 400) {\r\n                setErrMsg(t(data.message));\r\n            } else {\r\n                setErrMsg(data.message);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handlePasswordInput = (e) => setPassword(e.target.value)\r\n    const handlePasswordConfirmInput = (e) => setPasswordConfirm(e.target.value)\r\n\r\n    const togglePasswordVisibility = (e) => {\r\n        e.preventDefault()\r\n        setShowPassword(!showPassword);\r\n    };\r\n\r\n    return (<>\r\n        <Helmet title={t('title')} />\r\n        <div class=\"card card1\">\r\n            <form id=\"customerLoginForm\" className=\"form-inner customer-login-form\" onSubmit={handleSubmit}>\r\n                <div class=\"row justify-content-center my-auto\">\r\n                    <div class=\"col-md-8 col-10 my-5\">\r\n                        <div class=\"row justify-content-center px-3 py-4 mb-3\"> <Image id=\"logo\" src={logoPng} /> </div>\r\n\r\n                        <h5 class=\"m-0 my-2 my-2\">{t('Reset password')}</h5><span class=\"mobile-text\">{t('Enter new password for')} <b class=\"text-danger\">{verifyData && verifyData.email ? verifyData.email : ''}</b></span>\r\n                        <div class=\"form-group my-3\">\r\n                            <label class=\"form-control-label text-muted\" for=\"password\">{t('Password')}<span className=\"text-danger\">*</span></label>\r\n                            <div className='password-container'>\r\n                                <input\r\n                                    type={showPassword ? 'text' : 'password'}\r\n                                    id=\"password\"\r\n                                    name='password'\r\n                                    className=\"form-control\"\r\n                                    placeholder={t('Enter Password')}\r\n                                    minLength={6}\r\n                                    required\r\n                                    ref={passwordRef}\r\n                                    onChange={handlePasswordInput}\r\n                                    value={password}\r\n                                    autoComplete=\"current-password\"\r\n                                />\r\n                                <img className='eye-img' src={showPassword ? hideImg : showImg} onClick={togglePasswordVisibility}>\r\n                                </img>\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"form-group my-3\">\r\n                            <label class=\"form-control-label text-muted\" for=\"passwordConfirm\">{t('Confirm Password')}<span className=\"text-danger\">*</span></label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"passwordConfirm\"\r\n                                name='passwordConfirm'\r\n                                className=\"form-control\"\r\n                                placeholder={t('Enter Password Again')}\r\n                                minLength={6}\r\n                                required\r\n                                onChange={handlePasswordConfirmInput}\r\n                                value={passwordConfirm}\r\n                                autoComplete=\"current-password\"\r\n                            />\r\n                        </div>\r\n                        <div class=\"row justify-content-center my-3 px-3\">\r\n                            {isProcessing ? <button class=\"btn-block btn-color\" disabled={true}><Spinner animation=\"border\" variant=\"danger\" /></button> : <button class=\"btn-block btn-color\">{t('Reset')}</button>}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {errMsg ? (<Alert key='danger' variant='danger' style={{ textAlign: 'center' }} >{errMsg}</Alert>) : \"\"}\r\n                {sendMsg ? (<Alert key='success' variant='success' style={{ textAlign: 'center' }} >{sendMsg}</Alert>) : \"\"}\r\n            </form>\r\n\r\n        </div>\r\n        <div class=\"card card2\" style={{ backgroundImage: `url(${backgroundPng})` }}>\r\n        </div>\r\n\r\n\r\n    </>\r\n\r\n    )\r\n}\r\n\r\nexport default ResetPassword;"],"names":["t","getFixedT","navigate","useNavigate","_useSearchParams","useSearchParams","code","_slicedToArray","get","_useState","useState","_useState2","password","setPassword","_useState3","_useState4","passwordConfirm","setPasswordConfirm","_useState5","_useState6","sendMsg","passwordRef","useRef","_useState7","_useState8","errMsg","setErrMsg","_useState9","_useState10","isProcessing","setIsProcessing","_useState11","_useState12","showPassword","setShowPassword","_useResetPasswordMuta","useResetPasswordMutation","resetPassword","_useGetVerifyCodeQuer","useGetVerifyCodeQuery","type","verifyData","data","isLoading","isError","useEffect","current","focus","_jsx","Loading","Navigate","to","pathname","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","lowerCase","upperCase","numbers","variant","message","wrap","_context","prev","next","preventDefault","length","abrupt","match","email","unwrap","sent","t0","console","log","status","stop","_x","apply","arguments","_jsxs","_Fragment","children","Helmet","title","class","id","className","onSubmit","Image","src","logoPng","for","name","placeholder","minLength","required","ref","onChange","target","value","autoComplete","hideImg","showImg","onClick","disabled","Spinner","animation","Alert","style","textAlign","backgroundImage","concat","backgroundPng"],"sourceRoot":""}